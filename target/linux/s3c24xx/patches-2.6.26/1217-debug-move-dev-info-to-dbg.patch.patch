From 6901f097adc3fce4e34861a1634915fe56344c55 Mon Sep 17 00:00:00 2001
From: Andy Green <andy@openmoko.com>
Date: Fri, 25 Jul 2008 23:06:20 +0100
Subject: [PATCH] debug-move-dev-info-to-dbg.patch
 Suggested-by: Sean McNeil <sean@mcneil.com>

To see if some subtle race is involved, Sean has tried
removing syslog traffic during resume and found he was
not seeing the resume crash any more.  We're giving it
a try to see if it changes the behaviour for anyone
else.  It would mean we have a pretty fine race in there
somewhere.

Signed-off-by: Andy Green <andy@openmoko.com>
---
 arch/arm/plat-s3c24xx/neo1973_pm_gsm.c |    4 ++--
 drivers/i2c/chips/pcf50633.c           |   28 ++++++++++++++--------------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/arch/arm/plat-s3c24xx/neo1973_pm_gsm.c b/arch/arm/plat-s3c24xx/neo1973_pm_gsm.c
index dc27aea..de83939 100644
--- a/arch/arm/plat-s3c24xx/neo1973_pm_gsm.c
+++ b/arch/arm/plat-s3c24xx/neo1973_pm_gsm.c
@@ -95,7 +95,7 @@ static ssize_t gsm_write(struct device *dev, struct device_attribute *attr,
 	if (!strcmp(attr->attr.name, "power_on")) {
 		if (on) {
 			if (gta01_gsm.con) {
-				dev_info(dev, "powering up GSM, thus "
+				dev_dbg(dev, "powering up GSM, thus "
 					 "disconnecting serial console\n");
 
 				console_stop(gta01_gsm.con);
@@ -140,7 +140,7 @@ static ssize_t gsm_write(struct device *dev, struct device_attribute *attr,
 			if (gta01_gsm.con) {
 				console_start(gta01_gsm.con);
 
-				dev_info(dev, "powered down GSM, thus enabling "
+				dev_dbg(dev, "powered down GSM, thus enabling "
 					 "serial console\n");
 			}
 		}
diff --git a/drivers/i2c/chips/pcf50633.c b/drivers/i2c/chips/pcf50633.c
index fea2f38..4c73a9d 100644
--- a/drivers/i2c/chips/pcf50633.c
+++ b/drivers/i2c/chips/pcf50633.c
@@ -580,7 +580,7 @@ static void configure_pmu_for_charger(struct pcf50633_data *pcf,
 		 * stop GPO / EN_HOSTUSB power driving out on the same
 		 * USB power pins we have a 1A charger on right now!
 		 */
-		dev_info(&pcf->client.dev, "Charger -> CHARGER_TYPE_1A\n");
+		dev_dbg(&pcf->client.dev, "Charger -> CHARGER_TYPE_1A\n");
 		__reg_write(pcf, PCF50633_GPO - PCF50633_GPIO1 +
 				 PCF50633_REG_GPIO1CFG,
 				 __reg_read(pcf, PCF50633_GPO - PCF50633_GPIO1 +
@@ -636,7 +636,7 @@ static void pcf50633_work_usbcurlim(struct work_struct *work)
 	    (pcf->suspend_state == PCF50633_SS_COMPLETED_SUSPEND))
 		goto bail;
 
-	dev_info(&pcf->client.dev, "pcf50633_work_usbcurlim\n");
+	dev_dbg(&pcf->client.dev, "pcf50633_work_usbcurlim\n");
 
 	if (!pcf->probe_completed)
 		goto reschedule;
@@ -656,7 +656,7 @@ static void pcf50633_work_usbcurlim(struct work_struct *work)
 
 	/* OK let's set the requested limit and finish */
 
-	dev_info(&pcf->client.dev, "pcf50633_work_usbcurlim setting %dmA\n",
+	dev_dbg(&pcf->client.dev, "pcf50633_work_usbcurlim setting %dmA\n",
 							 pcf->pending_curlimit);
 	pcf50633_usb_curlim_set(pcf, pcf->pending_curlimit);
 
@@ -665,7 +665,7 @@ bail:
 	return;
 
 reschedule:
-	dev_info(&pcf->client.dev, "pcf50633_work_usbcurlim rescheduling\n");
+	dev_dbg(&pcf->client.dev, "pcf50633_work_usbcurlim rescheduling\n");
 	if (!schedule_work(&pcf->work_usb_curlimit))
 		dev_err(&pcf->client.dev, "curlim reschedule work "
 							    "already queued\n");
@@ -694,7 +694,7 @@ int pcf50633_notify_usb_current_limit_change(struct pcf50633_data *pcf,
 		return -EBUSY;
 	}
 
-	dev_info(&pcf->client.dev,
+	dev_dbg(&pcf->client.dev,
 		 "pcf50633_notify_usb_current_limit_change %dmA\n", ma);
 
 	/* prepare to detect USB power removal before we complete */
@@ -1213,7 +1213,7 @@ reschedule:
 	if ((pcf->suspend_state != PCF50633_SS_STARTING_SUSPEND) &&
 	    (pcf->suspend_state != PCF50633_SS_COMPLETED_SUSPEND)) {
 		msleep(10);
-		dev_info(&pcf->client.dev, "rescheduling interrupt service\n");
+		dev_dbg(&pcf->client.dev, "rescheduling interrupt service\n");
 	}
 	if (!schedule_work(&pcf->work))
 		dev_err(&pcf->client.dev, "int service reschedule failed\n");
@@ -1227,7 +1227,7 @@ static irqreturn_t pcf50633_irq(int irq, void *_pcf)
 	struct pcf50633_data *pcf = _pcf;
 
 	DEBUGP("entering(irq=%u, pcf=%p): scheduling work\n", irq, _pcf);
-	dev_info(&pcf->client.dev, "pcf50633_irq scheduling work\n");
+	dev_dbg(&pcf->client.dev, "pcf50633_irq scheduling work\n");
 
 	get_device(&pcf->client.dev);
 	if (!schedule_work(&pcf->work) && !pcf->working)
@@ -1739,7 +1739,7 @@ static int pcf50633_rtc_read_time(struct device *dev, struct rtc_time *tm)
 
 	mutex_unlock(&pcf->lock);
 
-	dev_info(dev, "PCF_TIME: %02x.%02x.%02x %02x:%02x:%02x\n",
+	dev_dbg(dev, "PCF_TIME: %02x.%02x.%02x %02x:%02x:%02x\n",
 		pcf_tm.time[PCF50633_TI_DAY],
 		pcf_tm.time[PCF50633_TI_MONTH],
 		pcf_tm.time[PCF50633_TI_YEAR],
@@ -1749,7 +1749,7 @@ static int pcf50633_rtc_read_time(struct device *dev, struct rtc_time *tm)
 
 	pcf2rtc_time(tm, &pcf_tm);
 
-	dev_info(dev, "RTC_TIME: %u.%u.%u %u:%u:%u\n",
+	dev_dbg(dev, "RTC_TIME: %u.%u.%u %u:%u:%u\n",
 		tm->tm_mday, tm->tm_mon, tm->tm_year,
 		tm->tm_hour, tm->tm_min, tm->tm_sec);
 
@@ -1763,11 +1763,11 @@ static int pcf50633_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	struct pcf50633_time pcf_tm;
 	int ret;
 
-	dev_info(dev, "RTC_TIME: %u.%u.%u %u:%u:%u\n",
+	dev_dbg(dev, "RTC_TIME: %u.%u.%u %u:%u:%u\n",
 		tm->tm_mday, tm->tm_mon, tm->tm_year,
 		tm->tm_hour, tm->tm_min, tm->tm_sec);
 	rtc2pcf_time(&pcf_tm, tm);
-	dev_info(dev, "PCF_TIME: %02x.%02x.%02x %02x:%02x:%02x\n",
+	dev_dbg(dev, "PCF_TIME: %02x.%02x.%02x %02x:%02x:%02x\n",
 		pcf_tm.time[PCF50633_TI_DAY],
 		pcf_tm.time[PCF50633_TI_MONTH],
 		pcf_tm.time[PCF50633_TI_YEAR],
@@ -2430,7 +2430,7 @@ static int pcf50633_suspend(struct device *dev, pm_message_t state)
 		else
 			tmp = pcf->standby_regs.ldo[(i - 4) * 2 + 1];
 
-		dev_info(dev, "disabling reg %s by setting ENA %d to 0x%02X\n",
+		dev_dbg(dev, "disabling reg %s by setting ENA %d to 0x%02X\n",
 			      pcf->pdata->rails[i].name,
 			      regulator_registers[i] + 1, tmp & 0xfe);
 
@@ -2505,7 +2505,7 @@ EXPORT_SYMBOL_GPL(pcf50633_wait_for_ready);
 
 void pcf50633_backlight_resume(struct pcf50633_data *pcf)
 {
-	dev_info(&pcf->client.dev, "pcf50633_backlight_resume\n");
+	dev_dbg(&pcf->client.dev, "pcf50633_backlight_resume\n");
 
 	/* platform defines resume ramp speed */
 	reg_write(pcf, PCF50633_REG_LEDDIM,
@@ -2524,7 +2524,7 @@ static int pcf50633_resume(struct device *dev)
 	u8 res[5];
 	u8 misc[PCF50633_REG_LEDDIM - PCF50633_REG_AUTOOUT + 1];
 
-	dev_info(dev, "pcf50633_resume suspended on entry = %d\n",
+	dev_dbg(dev, "pcf50633_resume suspended on entry = %d\n",
 						 (int)pcf->suspend_state);
 	mutex_lock(&pcf->lock);
 
-- 
1.5.6.3

