From 04c9c142a341af62081e856d32149d9f544dbfbe Mon Sep 17 00:00:00 2001
From: Andy Green <andy@openmoko.com>
Date: Mon, 11 Aug 2008 20:49:56 +0100
Subject: [PATCH] clean-remove-suspend-dependencies-syslog.patch

Signed-off-by: Andy Green <andy@openmoko.com>
---
 include/linux/resume-dependency.h |   17 ++++-------------
 1 files changed, 4 insertions(+), 13 deletions(-)

diff --git a/include/linux/resume-dependency.h b/include/linux/resume-dependency.h
index 959cadd..e284739 100644
--- a/include/linux/resume-dependency.h
+++ b/include/linux/resume-dependency.h
@@ -38,7 +38,6 @@ struct resume_dependency {
  */
 
 #define init_resume_dependency_list(_head) \
-	printk(KERN_ERR "##### init_resume_dependency_list(head=%p)\n", (_head)); \
 	INIT_LIST_HEAD(&(_head)->list);
 
 
@@ -52,14 +51,11 @@ struct resume_dependency {
 	struct list_head *_pos, *_q; \
 	struct resume_dependency *_d; \
 \
-	printk(KERN_ERR "##### register_resume_dependency(head=%p, dep=%p)\n", (_head), (_dep)); \
 	(_dep)->called_flag = 1; \
 	list_for_each_safe(_pos, _q, &((_head)->list)) { \
 		_d = list_entry(_pos, struct resume_dependency, list); \
-		if (_d == (_dep)) { \
+		if (_d == (_dep)) \
 			list_del(_pos); \
-			printk(KERN_ERR "#####   duplicate dependency removed first\n"); \
-		} \
 	} \
 	list_add(&(_dep)->list, &(_head)->list); \
 }
@@ -73,12 +69,9 @@ struct resume_dependency {
 	struct list_head *_pos, *_q; \
 	struct resume_dependency *_dep; \
 \
-	printk(KERN_ERR "##### callback_all_resume_dependencies(head=%p)\n", (_head)); \
 	list_for_each_safe(_pos, _q, &((_head)->list)) { \
 		_dep = list_entry(_pos, struct resume_dependency, list); \
-		printk(KERN_ERR "#####   callback list entry (head=%p, dep=%p)\n", (_head), (_dep)); \
 		_dep->called_flag = 1; \
-		printk(KERN_ERR "#####      callback=%p(context=%p))\n", (_dep->callback),(_dep->context)); \
 		(_dep->callback)(_dep->context); \
 		list_del(_pos); \
 	} \
@@ -88,19 +81,17 @@ struct resume_dependency {
  * handler will function as normal.  The dependency is activated by the suspend
  * handler for the driver that will be doing the callbacks.  This ensures that
  * if the suspend is aborted for any reason (error, driver busy, etc), that all
- * suspended drivers will resume, even if the driver upon which they are dependent
- * did not suspend, and hence will not resume, and thus would be unable to perform
- * the callbacks.
+ * suspended drivers will resume, even if the driver upon which they are
+ * dependent did not suspend, and hence will not resume, and thus would be
+ * unable to perform the callbacks.
  */
 
 #define activate_all_resume_dependencies(_head) { \
 	struct list_head *_pos, *_q; \
 	struct resume_dependency *_dep; \
 \
-	printk(KERN_ERR "##### activate_all_resume_dependencies(head=%p)\n", (_head)); \
 	list_for_each_safe(_pos, _q, &((_head)->list)) { \
 		_dep = list_entry(_pos, struct resume_dependency, list); \
-		printk(KERN_ERR "#####   activating callback list entry (head=%p, dep=%p)\n", (_head), (_dep)); \
 		_dep->called_flag = 0; \
 	} \
 }
-- 
1.5.6.5

