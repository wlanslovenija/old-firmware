--- a/net/mac80211/mlme.c	2008-09-24 16:24:03.000000000 +0200
+++ b/net/mac80211/mlme.c	2008-09-24 16:22:27.000000000 +0200
@@ -2856,6 +2856,7 @@
 		       (unsigned long long)(rx_timestamp - beacon_timestamp),
 		       jiffies);
 #endif /* CONFIG_MAC80211_IBSS_DEBUG */
+#if 0
 		if (beacon_timestamp > rx_timestamp) {
 #ifndef CONFIG_MAC80211_IBSS_DEBUG
 			printk(KERN_DEBUG "%s: beacon TSF higher than "
@@ -2867,6 +2868,7 @@
 					       mgmt->bssid, mgmt->sa,
 					       BIT(rx_status->rate_idx));
 		}
+#endif
 	}
 
 	ieee80211_rx_bss_put(local, bss);
@@ -3713,7 +3715,11 @@
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_if_sta *ifsta;
-	int res;
+	struct ieee80211_sta_bss *bss;
+	struct ieee80211_local *local = wdev_priv(dev->ieee80211_ptr);
+	struct ieee80211_supported_band *sband;
+	u8 *pos;
+	int res, i;
 
 	if (len > IEEE80211_MAX_SSID_LEN)
 		return -EINVAL;
@@ -3745,11 +3751,47 @@
 	else
 		ifsta->flags &= ~IEEE80211_STA_SSID_SET;
 
-	if (sdata->vif.type == IEEE80211_IF_TYPE_IBSS &&
-	    !(ifsta->flags & IEEE80211_STA_BSSID_SET)) {
-		ifsta->ibss_join_req = jiffies;
-		ifsta->state = IEEE80211_IBSS_SEARCH;
-		return ieee80211_sta_find_ibss(dev, ifsta);
+	if (sdata->vif.type == IEEE80211_IF_TYPE_IBSS) {
+		if (!(ifsta->flags & IEEE80211_STA_BSSID_SET)) {
+			ifsta->ibss_join_req = jiffies;
+			ifsta->state = IEEE80211_IBSS_SEARCH;
+			return ieee80211_sta_find_ibss(dev, ifsta);
+		} else {
+			/*
+			 * BSSID has been preconfigured - use that.
+			 */
+			bss = ieee80211_rx_bss_add(dev, ifsta->bssid,
+						   local->hw.conf.channel->center_freq,
+						   sdata->u.sta.ssid, sdata->u.sta.ssid_len);
+
+			if (!bss)
+				return -ENOMEM;
+
+			bss->band = local->hw.conf.channel->band;
+			sband = local->hw.wiphy->bands[bss->band];
+
+			if (local->hw.conf.beacon_int == 0)
+				local->hw.conf.beacon_int = 100;
+
+			bss->beacon_int = local->hw.conf.beacon_int;
+			bss->last_update = jiffies;
+			bss->capability = WLAN_CAPABILITY_IBSS;
+			if (sdata->default_key)
+		                bss->capability |= WLAN_CAPABILITY_PRIVACY;
+		        else
+		                sdata->drop_unencrypted = 0;
+
+			bss->supp_rates_len = sband->n_bitrates;
+		        pos = bss->supp_rates;
+		        for (i = 0; i < sband->n_bitrates; i++) {
+                		int rate = sband->bitrates[i].bitrate;
+		                *pos++ = (u8) (rate / 5);
+		        }
+			
+		        res = ieee80211_sta_join_ibss(dev, ifsta, bss);
+		        ieee80211_rx_bss_put(local, bss);
+		        return res;
+		}
 	}
 
 	return 0;
