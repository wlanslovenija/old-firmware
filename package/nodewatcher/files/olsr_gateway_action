#!/bin/sh
ACTION="$1"
ROUTE="$2"
LOCK="/var/lock/traffic_redirection"

# Acquire lock
lock ${LOCK}
trap "lock -u ${LOCK}" INT TERM EXIT

if [[ "${ROUTE}" == "0.0.0.0" ]]; then
  # Get some variables
  LOCAL_IP="`uci get network.subnet0.ipaddr`"
  CLIENT_SUBNET="${LOCAL_IP}/`uci get network.subnet0.netmask`"
  
  # Check what action to take
  if [[ "${ACTION}" == "del" ]]; then
    # Internet gateway has just gone down, setup request redirection
    if [[ ! -f /tmp/traffic_redirection_enabled ]]; then
      # Reconfigure dnsmasq
      killall dnsmasq
      /usr/sbin/dnsmasq --address=/#/${LOCAL_IP}
      
      # Setup nullhttpd
      /usr/bin/nullhttpd -p 2051 -b /www/nullhttpd -d /var/run/nullhttpd.pid
      
      # Insert iptables rule to forward incoming HTTP traffic (only from client subnet)
      iptables -t nat -I PREROUTING -p tcp --dport 80 -s ${CLIENT_SUBNET} -j DNAT --to-destination ${LOCAL_IP}:2051
      iptables -I INPUT -p tcp --dport 2051 -j ACCEPT
      
      # Setup rediraction enabled mark
      touch /tmp/traffic_redirection_enabled
    fi
  else
    # Internet gateway has come back up, reconfigure redirection when needed
    if [[ -f /tmp/traffic_redirection_enabled ]]; then
      # Reconfigure dnsmasq
      killall dnsmasq
      /etc/init.d/dnsmasq start
      
      # Remove iptables redirection rule
      iptables -t nat -D PREROUTING -p tcp --dport 80 -s ${CLIENT_SUBNET} -j DNAT --to-destination ${LOCAL_IP}:2051
      iptables -D INPUT -p tcp --dport 2051 -j ACCEPT
      
      # Shutdown nullhttpd
      killall nullhttpd
      
      # Remove redirection enabled mark
      rm /tmp/traffic_redirection_enabled
    fi
  fi
fi

# Release lock
lock -u ${LOCK}

